{"ast":null,"code":"function getCookie(name) {\n  let cookieValue = null;\n\n  if (document.cookie && document.cookie !== '') {\n    const cookies = document.cookie.split(';');\n\n    for (let i = 0; i < cookies.length; i++) {\n      const cookie = cookies[i].trim(); // Does this cookie string begin with the name we want?\n\n      if (cookie.substring(0, name.length + 1) === name + '=') {\n        cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n        break;\n      }\n    }\n  }\n\n  return cookieValue;\n}\n\nfunction lookup(method, endpoint, callback, data) {\n  let jsonData;\n\n  if (data) {\n    //if data exists\n    jsonData = JSON.stringify(data);\n  }\n\n  const xhr = new XMLHttpRequest(); //used to intereact with servers, retrieve data from a URL without doing a full page refresh\n\n  const url = `http://localhost:8000/api${endpoint}`;\n  console.log(endpoint);\n  xhr.responseType = \"json\";\n  const csrftoken = getCookie('csrftoken');\n  xhr.open(method, url); //Initializes a request.\n\n  xhr.setRequestHeader(\"Content-Type\", \"application/json\"); //setRequestHeader(name, value) Sets the request header with the given name and value.\n\n  xhr.setRequestHeader(\"HTTP_X_REQUESTED_WITH\", \"XMLHttpRequest\");\n\n  if (csrftoken) {\n    xhr.setRequestHeader(\"X-CSRFToken\", csrftoken);\n  }\n\n  xhr.onload = function () {\n    //Fired when an XMLHttpRequest transaction completes successfully.\n    callback(xhr.response, xhr.status);\n  };\n\n  xhr.onerror = function (e) {\n    //e is the short var reference for event object which will be passed to event handlers.\n    console.log(e);\n    callback({\n      \"message\": \"The request was an error\"\n    }, 400);\n  };\n\n  xhr.send(jsonData);\n}\n\nexport function createPost(newPost, callback) {\n  lookup(\"POST\", \"/posts/create/\", callback, {\n    tweet: newPost\n  });\n}\nexport function loadPosts(callback) {\n  lookup(\"GET\", \"/posts/\", callback);\n}","map":{"version":3,"sources":["/Users/romansingh/Documents/project4/network-web/src/lookup/components.js"],"names":["getCookie","name","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","lookup","method","endpoint","callback","data","jsonData","JSON","stringify","xhr","XMLHttpRequest","url","console","log","responseType","csrftoken","open","setRequestHeader","onload","response","status","onerror","e","send","createPost","newPost","tweet","loadPosts"],"mappings":"AAAA,SAASA,SAAT,CAAmBC,IAAnB,EAAyB;AACvB,MAAIC,WAAW,GAAG,IAAlB;;AACA,MAAIC,QAAQ,CAACC,MAAT,IAAmBD,QAAQ,CAACC,MAAT,KAAoB,EAA3C,EAA+C;AAC3C,UAAMC,OAAO,GAAGF,QAAQ,CAACC,MAAT,CAAgBE,KAAhB,CAAsB,GAAtB,CAAhB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,OAAO,CAACG,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACrC,YAAMH,MAAM,GAAGC,OAAO,CAACE,CAAD,CAAP,CAAWE,IAAX,EAAf,CADqC,CAErC;;AACA,UAAIL,MAAM,CAACM,SAAP,CAAiB,CAAjB,EAAoBT,IAAI,CAACO,MAAL,GAAc,CAAlC,MAA0CP,IAAI,GAAG,GAArD,EAA2D;AACvDC,QAAAA,WAAW,GAAGS,kBAAkB,CAACP,MAAM,CAACM,SAAP,CAAiBT,IAAI,CAACO,MAAL,GAAc,CAA/B,CAAD,CAAhC;AACA;AACH;AACJ;AACJ;;AACD,SAAON,WAAP;AACD;;AAMD,SAASU,MAAT,CAAgBC,MAAhB,EAAwBC,QAAxB,EAAkCC,QAAlC,EAA4CC,IAA5C,EAAkD;AAChD,MAAIC,QAAJ;;AACA,MAAID,IAAJ,EAAS;AAAE;AACTC,IAAAA,QAAQ,GAAGC,IAAI,CAACC,SAAL,CAAeH,IAAf,CAAX;AACD;;AACD,QAAMI,GAAG,GAAG,IAAIC,cAAJ,EAAZ,CALgD,CAKf;;AACjC,QAAMC,GAAG,GAAI,4BAA2BR,QAAS,EAAjD;AACAS,EAAAA,OAAO,CAACC,GAAR,CAAYV,QAAZ;AACAM,EAAAA,GAAG,CAACK,YAAJ,GAAmB,MAAnB;AACA,QAAMC,SAAS,GAAG1B,SAAS,CAAC,WAAD,CAA3B;AACAoB,EAAAA,GAAG,CAACO,IAAJ,CAASd,MAAT,EAAiBS,GAAjB,EAVgD,CAU1B;;AACtBF,EAAAA,GAAG,CAACQ,gBAAJ,CAAqB,cAArB,EAAqC,kBAArC,EAXgD,CAWS;;AACzDR,EAAAA,GAAG,CAACQ,gBAAJ,CAAqB,uBAArB,EAA8C,gBAA9C;;AAEA,MAAIF,SAAJ,EAAc;AACZN,IAAAA,GAAG,CAACQ,gBAAJ,CAAqB,aAArB,EAAoCF,SAApC;AACD;;AACDN,EAAAA,GAAG,CAACS,MAAJ,GAAa,YAAW;AAAE;AACxBd,IAAAA,QAAQ,CAACK,GAAG,CAACU,QAAL,EAAeV,GAAG,CAACW,MAAnB,CAAR;AACD,GAFD;;AAGAX,EAAAA,GAAG,CAACY,OAAJ,GAAc,UAAUC,CAAV,EAAa;AAAE;AAC3BV,IAAAA,OAAO,CAACC,GAAR,CAAYS,CAAZ;AACAlB,IAAAA,QAAQ,CAAC;AAAC,iBAAW;AAAZ,KAAD,EAA0C,GAA1C,CAAR;AACD,GAHD;;AAIAK,EAAAA,GAAG,CAACc,IAAJ,CAASjB,QAAT;AACD;;AAED,OAAO,SAASkB,UAAT,CAAoBC,OAApB,EAA6BrB,QAA7B,EAAuC;AAC5CH,EAAAA,MAAM,CAAC,MAAD,EAAS,gBAAT,EAA2BG,QAA3B,EAAqC;AAACsB,IAAAA,KAAK,EAAED;AAAR,GAArC,CAAN;AACD;AAED,OAAO,SAASE,SAAT,CAAmBvB,QAAnB,EAA6B;AAClCH,EAAAA,MAAM,CAAC,KAAD,EAAQ,SAAR,EAAmBG,QAAnB,CAAN;AACD","sourcesContent":["function getCookie(name) {\n  let cookieValue = null;\n  if (document.cookie && document.cookie !== '') {\n      const cookies = document.cookie.split(';');\n      for (let i = 0; i < cookies.length; i++) {\n          const cookie = cookies[i].trim();\n          // Does this cookie string begin with the name we want?\n          if (cookie.substring(0, name.length + 1) === (name + '=')) {\n              cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n              break;\n          }\n      }\n  }\n  return cookieValue;\n}\n  \n\n\n\n\nfunction lookup(method, endpoint, callback, data) {\n  let jsonData; \n  if (data){ //if data exists\n    jsonData = JSON.stringify(data)\n  }\n  const xhr = new XMLHttpRequest() //used to intereact with servers, retrieve data from a URL without doing a full page refresh\n  const url = `http://localhost:8000/api${endpoint}`\n  console.log(endpoint)\n  xhr.responseType = \"json\"\n  const csrftoken = getCookie('csrftoken');\n  xhr.open(method, url) //Initializes a request.\n  xhr.setRequestHeader(\"Content-Type\", \"application/json\") //setRequestHeader(name, value) Sets the request header with the given name and value.\n  xhr.setRequestHeader(\"HTTP_X_REQUESTED_WITH\", \"XMLHttpRequest\")\n  \n  if (csrftoken){\n    xhr.setRequestHeader(\"X-CSRFToken\", csrftoken)\n  }\n  xhr.onload = function() { //Fired when an XMLHttpRequest transaction completes successfully.\n    callback(xhr.response, xhr.status)\n  }\n  xhr.onerror = function (e) { //e is the short var reference for event object which will be passed to event handlers.\n    console.log(e)\n    callback({\"message\": \"The request was an error\"}, 400)\n  }\n  xhr.send(jsonData)\n}\n\nexport function createPost(newPost, callback) {\n  lookup(\"POST\", \"/posts/create/\", callback, {tweet: newPost})\n}\n\nexport function loadPosts(callback) {\n  lookup(\"GET\", \"/posts/\", callback)\n}\n"]},"metadata":{},"sourceType":"module"}