{"ast":null,"code":"var _jsxFileName = \"/Users/romansingh/Documents/project4/network-web/src/posts/list.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { apiPostList } from './lookup';\nimport { Post } from './detail';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function PostsList(props) {\n  _s();\n\n  const [PostsInit, setPostsInit] = useState([]);\n  const [Posts, setPosts] = useState([]);\n  const [PostsDidSet, setPostsDidSet] = useState(false);\n  useEffect(() => {\n    const final = [...props.newPosts].concat(PostsInit); //join new posts and posts init\n\n    if (final.length !== Posts.length) {\n      setPosts(final); //is final and posts length equal setPosts is equal to final\n    }\n  }, [props.newPosts, Posts, PostsInit]);\n  useEffect(() => {\n    if (PostsDidSet === false) {\n      // if it is false\n      const handlePostListLookup = (response, status) => {\n        //set handlePostListLookup to response and status\n        if (status === 200) {\n          setPostsInit(response); //if status is 200 setPostsInit to response\n\n          setPostsDidSet(true); //change from false to true\n        } else {\n          alert(\"There was an error\");\n        }\n      };\n\n      apiPostList(props.username, handlePostListLookup); //update post list with resposne and status\n    }\n  }, [PostsInit, PostsDidSet, setPostsDidSet, props.username]); //these are dependencies for useEffect\n\n  const handleDidRetweet = newPost => {\n    const updatePostsInit = [...PostsInit];\n    updatePostsInit.unshift(newPost);\n    setPostsInit(updatePostsInit);\n    const updateFinalPosts = [...Posts];\n    updatePostsInit.unshift(Posts);\n    setPosts(updatePostsInit);\n  };\n\n  return Posts.map((item, index) => {\n    return /*#__PURE__*/_jsxDEV(Post, {\n      Post: item,\n      didRetweet: handleDidRetweet,\n      className: \"my-5 py-5 border bg-white text-dark\"\n    }, `${index}-{item.id}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 14\n    }, this);\n  });\n}\n\n_s(PostsList, \"qi/mnyAaODygMESwRyH25XkUquY=\");\n\n_c = PostsList;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostsList\");","map":{"version":3,"sources":["/Users/romansingh/Documents/project4/network-web/src/posts/list.js"],"names":["React","useEffect","useState","apiPostList","Post","PostsList","props","PostsInit","setPostsInit","Posts","setPosts","PostsDidSet","setPostsDidSet","final","newPosts","concat","length","handlePostListLookup","response","status","alert","username","handleDidRetweet","newPost","updatePostsInit","unshift","updateFinalPosts","map","item","index"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAA0C,OAA1C;AACA,SAAQC,WAAR,QAA0B,UAA1B;AACA,SAAQC,IAAR,QAAmB,UAAnB;;AACA,OAAO,SAASC,SAAT,CAAmBC,KAAnB,EAA0B;AAAA;;AAC7B,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACS,WAAD,EAAcC,cAAd,IAAgCV,QAAQ,CAAC,KAAD,CAA9C;AACAD,EAAAA,SAAS,CAAC,MAAI;AACZ,UAAMY,KAAK,GAAG,CAAC,GAAGP,KAAK,CAACQ,QAAV,EAAoBC,MAApB,CAA2BR,SAA3B,CAAd,CADY,CACwC;;AACpD,QAAIM,KAAK,CAACG,MAAN,KAAiBP,KAAK,CAACO,MAA3B,EAAmC;AACjCN,MAAAA,QAAQ,CAACG,KAAD,CAAR,CADiC,CACjB;AACjB;AACF,GALQ,EAKN,CAACP,KAAK,CAACQ,QAAP,EAAiBL,KAAjB,EAAwBF,SAAxB,CALM,CAAT;AAOAN,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIU,WAAW,KAAK,KAApB,EAA0B;AAAQ;AAChC,YAAMM,oBAAoB,GAAI,CAACC,QAAD,EAAWC,MAAX,KAAsB;AAAE;AACpD,YAAIA,MAAM,KAAK,GAAf,EAAmB;AACjBX,UAAAA,YAAY,CAACU,QAAD,CAAZ,CADiB,CACM;;AACvBN,UAAAA,cAAc,CAAC,IAAD,CAAd,CAFiB,CAEI;AACtB,SAHD,MAGO;AACLQ,UAAAA,KAAK,CAAC,oBAAD,CAAL;AACD;AACF,OAPD;;AAQAjB,MAAAA,WAAW,CAACG,KAAK,CAACe,QAAP,EAAiBJ,oBAAjB,CAAX,CATwB,CAS0B;AAEnD;AACF,GAbQ,EAaN,CAACV,SAAD,EAAYI,WAAZ,EAAyBC,cAAzB,EAAyCN,KAAK,CAACe,QAA/C,CAbM,CAAT,CAX6B,CAwBgC;;AAE7D,QAAMC,gBAAgB,GAAIC,OAAD,IAAa;AACpC,UAAMC,eAAe,GAAG,CAAC,GAAGjB,SAAJ,CAAxB;AACAiB,IAAAA,eAAe,CAACC,OAAhB,CAAwBF,OAAxB;AACAf,IAAAA,YAAY,CAACgB,eAAD,CAAZ;AACA,UAAME,gBAAgB,GAAG,CAAC,GAAGjB,KAAJ,CAAzB;AACAe,IAAAA,eAAe,CAACC,OAAhB,CAAwBhB,KAAxB;AACAC,IAAAA,QAAQ,CAACc,eAAD,CAAR;AACD,GAPD;;AAQA,SAAOf,KAAK,CAACkB,GAAN,CAAU,CAACC,IAAD,EAAOC,KAAP,KAAe;AAC9B,wBAAO,QAAC,IAAD;AACP,MAAA,IAAI,EAAED,IADC;AAEP,MAAA,UAAU,EAAIN,gBAFP;AAGP,MAAA,SAAS,EAAC;AAHH,OAID,GAAEO,KAAM,YAJP;AAAA;AAAA;AAAA;AAAA,YAAP;AAKD,GANM,CAAP;AAOD;;GAzCaxB,S;;KAAAA,S","sourcesContent":["import React, {useEffect, useState}  from 'react'\nimport {apiPostList} from './lookup' \nimport {Post} from './detail'\nexport function PostsList(props) {\n    const [PostsInit, setPostsInit] = useState([])\n    const [Posts, setPosts] = useState([])\n    const [PostsDidSet, setPostsDidSet] = useState(false)\n    useEffect(()=>{\n      const final = [...props.newPosts].concat(PostsInit) //join new posts and posts init\n      if (final.length !== Posts.length) {\n        setPosts(final) //is final and posts length equal setPosts is equal to final\n      }\n    }, [props.newPosts, Posts, PostsInit])\n  \n    useEffect(() => {           \n      if (PostsDidSet === false){       // if it is false\n        const handlePostListLookup  = (response, status) => { //set handlePostListLookup to response and status\n          if (status === 200){ \n            setPostsInit(response) //if status is 200 setPostsInit to response\n            setPostsDidSet(true) //change from false to true\n          } else {\n            alert(\"There was an error\")\n          }\n        }\n        apiPostList(props.username, handlePostListLookup) //update post list with resposne and status\n        \n      }\n    }, [PostsInit, PostsDidSet, setPostsDidSet, props.username]) //these are dependencies for useEffect\n  \n    const handleDidRetweet = (newPost) => {\n      const updatePostsInit = [...PostsInit]\n      updatePostsInit.unshift(newPost)\n      setPostsInit(updatePostsInit)\n      const updateFinalPosts = [...Posts]\n      updatePostsInit.unshift(Posts)\n      setPosts(updatePostsInit)\n    }\n    return Posts.map((item, index)=>{\n      return <Post \n      Post={item} \n      didRetweet = {handleDidRetweet}\n      className='my-5 py-5 border bg-white text-dark' \n      key={`${index}-{item.id}`} />\n    })\n  }"]},"metadata":{},"sourceType":"module"}