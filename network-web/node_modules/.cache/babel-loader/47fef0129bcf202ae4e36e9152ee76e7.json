{"ast":null,"code":"var _jsxFileName = \"/Users/romansingh/Documents/project4/network-web/src/posts/list.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { apiPostList } from './lookup';\nimport { Tweet } from './detail';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function TweetsList(props) {\n  _s();\n\n  const [tweetsInit, setTweetsInit] = useState([]);\n  const [tweets, setTweets] = useState([]);\n  const [tweetsDidSet, setTweetsDidSet] = useState(false);\n  useEffect(() => {\n    const final = [...props.newTweets].concat(tweetsInit);\n\n    if (final.length !== tweets.length) {\n      setTweets(final);\n    }\n  }, [props.newTweets, tweets, tweetsInit]);\n  useEffect(() => {\n    if (tweetsDidSet === false) {\n      const handleTweetListLookup = (response, status) => {\n        if (status === 200) {\n          setTweetsInit(response);\n          setTweetsDidSet(true);\n        } else {\n          alert(\"There was an error\");\n        }\n      };\n\n      apiTweetList(props.username, handleTweetListLookup);\n    }\n  }, [tweetsInit, tweetsDidSet, setTweetsDidSet, props.username]);\n\n  const handleDidRetweet = newTweet => {\n    const updateTweetsInit = [...tweetsInit];\n    updateTweetsInit.unshift(newTweet);\n    setTweetsInit(updateTweetsInit);\n    const updateFinalTweets = [...tweets];\n    updateFinalTweets.unshift(tweets);\n    setTweets(updateFinalTweets);\n  };\n\n  return tweets.map((item, index) => {\n    return /*#__PURE__*/_jsxDEV(Tweet, {\n      tweet: item,\n      didRetweet: handleDidRetweet,\n      className: \"my-5 py-5 border bg-white text-dark\"\n    }, `${index}-{item.id}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 14\n    }, this);\n  });\n}\n\n_s(TweetsList, \"P6qXvmm+5AyDsJ0n/lMk6wZyO4Q=\");\n\n_c = TweetsList;\n\nvar _c;\n\n$RefreshReg$(_c, \"TweetsList\");","map":{"version":3,"sources":["/Users/romansingh/Documents/project4/network-web/src/posts/list.js"],"names":["React","useEffect","useState","apiPostList","Tweet","TweetsList","props","tweetsInit","setTweetsInit","tweets","setTweets","tweetsDidSet","setTweetsDidSet","final","newTweets","concat","length","handleTweetListLookup","response","status","alert","apiTweetList","username","handleDidRetweet","newTweet","updateTweetsInit","unshift","updateFinalTweets","map","item","index"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAA0C,OAA1C;AAEA,SAAQC,WAAR,QAA0B,UAA1B;AAEA,SAAQC,KAAR,QAAoB,UAApB;;AAEA,OAAO,SAASC,UAAT,CAAoBC,KAApB,EAA2B;AAAA;;AAC9B,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BN,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACO,MAAD,EAASC,SAAT,IAAsBR,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACS,YAAD,EAAeC,eAAf,IAAkCV,QAAQ,CAAC,KAAD,CAAhD;AACAD,EAAAA,SAAS,CAAC,MAAI;AACZ,UAAMY,KAAK,GAAG,CAAC,GAAGP,KAAK,CAACQ,SAAV,EAAqBC,MAArB,CAA4BR,UAA5B,CAAd;;AACA,QAAIM,KAAK,CAACG,MAAN,KAAiBP,MAAM,CAACO,MAA5B,EAAoC;AAClCN,MAAAA,SAAS,CAACG,KAAD,CAAT;AACD;AACF,GALQ,EAKN,CAACP,KAAK,CAACQ,SAAP,EAAkBL,MAAlB,EAA0BF,UAA1B,CALM,CAAT;AAOAN,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIU,YAAY,KAAK,KAArB,EAA2B;AACzB,YAAMM,qBAAqB,GAAG,CAACC,QAAD,EAAWC,MAAX,KAAsB;AAClD,YAAIA,MAAM,KAAK,GAAf,EAAmB;AACjBX,UAAAA,aAAa,CAACU,QAAD,CAAb;AACAN,UAAAA,eAAe,CAAC,IAAD,CAAf;AACD,SAHD,MAGO;AACLQ,UAAAA,KAAK,CAAC,oBAAD,CAAL;AACD;AACF,OAPD;;AAQAC,MAAAA,YAAY,CAACf,KAAK,CAACgB,QAAP,EAAiBL,qBAAjB,CAAZ;AACD;AACF,GAZQ,EAYN,CAACV,UAAD,EAAaI,YAAb,EAA2BC,eAA3B,EAA4CN,KAAK,CAACgB,QAAlD,CAZM,CAAT;;AAeA,QAAMC,gBAAgB,GAAIC,QAAD,IAAc;AACrC,UAAMC,gBAAgB,GAAG,CAAC,GAAGlB,UAAJ,CAAzB;AACAkB,IAAAA,gBAAgB,CAACC,OAAjB,CAAyBF,QAAzB;AACAhB,IAAAA,aAAa,CAACiB,gBAAD,CAAb;AACA,UAAME,iBAAiB,GAAG,CAAC,GAAGlB,MAAJ,CAA1B;AACAkB,IAAAA,iBAAiB,CAACD,OAAlB,CAA0BjB,MAA1B;AACAC,IAAAA,SAAS,CAACiB,iBAAD,CAAT;AACD,GAPD;;AAQA,SAAOlB,MAAM,CAACmB,GAAP,CAAW,CAACC,IAAD,EAAOC,KAAP,KAAe;AAC/B,wBAAO,QAAC,KAAD;AACL,MAAA,KAAK,EAAED,IADF;AAEL,MAAA,UAAU,EAAEN,gBAFP;AAGL,MAAA,SAAS,EAAC;AAHL,OAIC,GAAEO,KAAM,YAJT;AAAA;AAAA;AAAA;AAAA,YAAP;AAKD,GANM,CAAP;AAOD;;GAzCazB,U;;KAAAA,U","sourcesContent":["import React, {useEffect, useState}  from 'react'\n\nimport {apiPostList} from './lookup'\n\nimport {Tweet} from './detail'\n\nexport function TweetsList(props) {\n    const [tweetsInit, setTweetsInit] = useState([])\n    const [tweets, setTweets] = useState([])\n    const [tweetsDidSet, setTweetsDidSet] = useState(false)\n    useEffect(()=>{\n      const final = [...props.newTweets].concat(tweetsInit)\n      if (final.length !== tweets.length) {\n        setTweets(final)\n      }\n    }, [props.newTweets, tweets, tweetsInit])\n\n    useEffect(() => {\n      if (tweetsDidSet === false){\n        const handleTweetListLookup = (response, status) => {\n          if (status === 200){\n            setTweetsInit(response)\n            setTweetsDidSet(true)\n          } else {\n            alert(\"There was an error\")\n          }\n        }\n        apiTweetList(props.username, handleTweetListLookup)\n      }\n    }, [tweetsInit, tweetsDidSet, setTweetsDidSet, props.username])\n\n\n    const handleDidRetweet = (newTweet) => {\n      const updateTweetsInit = [...tweetsInit]\n      updateTweetsInit.unshift(newTweet)\n      setTweetsInit(updateTweetsInit)\n      const updateFinalTweets = [...tweets]\n      updateFinalTweets.unshift(tweets)\n      setTweets(updateFinalTweets)\n    }\n    return tweets.map((item, index)=>{\n      return <Tweet  \n        tweet={item} \n        didRetweet={handleDidRetweet}\n        className='my-5 py-5 border bg-white text-dark' \n        key={`${index}-{item.id}`} />\n    })\n  }\n"]},"metadata":{},"sourceType":"module"}