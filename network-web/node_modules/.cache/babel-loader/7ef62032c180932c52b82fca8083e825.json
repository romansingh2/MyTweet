{"ast":null,"code":"var _jsxFileName = \"/Users/romansingh/Documents/project4/network-web/src/posts/components.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { ActionBtn } from './buttons ';\nimport { apiPostCreate, apiPostList } from './lookup';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function PostsComponent(props) {\n  _s();\n\n  const textAreaRef = /*#__PURE__*/React.createRef(); //React refs make it possible for you to directly access the DOM in React.\n\n  const [newPosts, setNewPosts] = useState([]); //create variables newPosts and setNewPosts\n\n  const canPost = props.canPost === \"false\" ? false : true;\n\n  const handleBackendUpdate = (response, status) => {\n    // backend api response handler\n    let tempNewPosts = [...newPosts]; //create variable tempNewPosts and set it to newPosts array\n\n    if (status === 201) {\n      tempNewPosts.unshift(response); //add new element to tempnewposts array, response should bring back actual post\n\n      setNewPosts(tempNewPosts); //change the state of setNewPosts to tempNewPosts\n    } else {\n      console.log(response);\n      alert(\"An error occured please try again\");\n    }\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault(); //if intended action does not occur prevent default action\n\n    const newVal = textAreaRef.current.value; //set newVal equal to the value of the text area\n    // backend api request\n\n    apiPostCreate(newVal, handleBackendUpdate); //newVal is the new post\n    //response and status are the callback\n\n    textAreaRef.current.value = ''; // set text area to be blank after submit\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: props.className,\n    children: [canPost === true && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"col-12 mb-3\",\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n          ref: textAreaRef,\n          required: true,\n          className: \"form-control\",\n          name: \"Post\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"btn btn-primary my-3\",\n          children: \"Post\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 32\n    }, this), /*#__PURE__*/_jsxDEV(PostsList, {\n      newPosts: newPosts,\n      ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 10\n  }, this);\n}\n\n_s(PostsComponent, \"5dEAE/degksqC52lyKGNktfE0t8=\");\n\n_c = PostsComponent;\nexport function ParentPost(props) {\n  const {\n    post\n  } = props;\n  return post.parent ? /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"col-11 mx-auto p-3 border rounded\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"mb-0 text-muted small\",\n        children: \"Retweet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Post, {\n        hideActions: true,\n        className: ' ',\n        Post: post.parent\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 26\n  }, this) : null;\n}\n_c2 = ParentPost;\nexport function Post(props) {\n  _s2();\n\n  const {\n    Post,\n    didRetweet,\n    hideActions\n  } = props;\n  const [actionPost, setActionPost] = useState(props.Post ? props.Post : null);\n  const className = props.className ? props.className : 'col-10 mx-auto col-md-6';\n\n  const handlePerformAction = (newActionPost, status) => {\n    if (status === 200) {\n      setActionPost(newActionPost);\n    } else if (status === 201) {\n      if (didRetweet) {\n        didRetweet(newActionPost);\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: className,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [Post.id, \" - \", Post.tweet]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ParentPost, {\n        post: Post\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 15\n    }, this), actionPost && hideActions !== true && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"btn btn-group\",\n      children: [/*#__PURE__*/_jsxDEV(ActionBtn, {\n        Post: actionPost,\n        didPerformAction: handlePerformAction,\n        action: {\n          type: \"like\",\n          display: \"Likes\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(ActionBtn, {\n        Post: actionPost,\n        didPerformAction: handlePerformAction,\n        action: {\n          type: \"unlike\",\n          display: \"Unlike\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(ActionBtn, {\n        Post: actionPost,\n        didPerformAction: handlePerformAction,\n        action: {\n          type: \"retweet\",\n          display: \"Retweet\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 52\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 14\n  }, this);\n}\n\n_s2(Post, \"QGktl4krRTk16CkwsFQlB4J8Hag=\");\n\n_c3 = Post;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"PostsComponent\");\n$RefreshReg$(_c2, \"ParentPost\");\n$RefreshReg$(_c3, \"Post\");","map":{"version":3,"sources":["/Users/romansingh/Documents/project4/network-web/src/posts/components.js"],"names":["React","useEffect","useState","ActionBtn","apiPostCreate","apiPostList","PostsComponent","props","textAreaRef","createRef","newPosts","setNewPosts","canPost","handleBackendUpdate","response","status","tempNewPosts","unshift","console","log","alert","handleSubmit","event","preventDefault","newVal","current","value","className","ParentPost","post","parent","Post","didRetweet","hideActions","actionPost","setActionPost","handlePerformAction","newActionPost","id","tweet","type","display"],"mappings":"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","sourcesContent":["import React, {useEffect, useState}  from 'react'\n\nimport {ActionBtn} from './buttons '\n\nimport \n  {\n  apiPostCreate, \n  apiPostList} from './lookup' \n\nexport function PostsComponent(props) {\n  \n  const textAreaRef = React.createRef() //React refs make it possible for you to directly access the DOM in React.\n  const [newPosts, setNewPosts] = useState([]) //create variables newPosts and setNewPosts\n  \n  const canPost = props.canPost === \"false\" ? false : true\n  const handleBackendUpdate = (response, status) => {\n    // backend api response handler\n    let tempNewPosts = [...newPosts] //create variable tempNewPosts and set it to newPosts array\n    if (status === 201){\n      tempNewPosts.unshift(response) //add new element to tempnewposts array, response should bring back actual post\n      setNewPosts(tempNewPosts) //change the state of setNewPosts to tempNewPosts\n\n    } else {\n      console.log(response)\n      alert(\"An error occured please try again\")\n    }\n  }\n  \n  const handleSubmit = (event) => { \n    event.preventDefault() //if intended action does not occur prevent default action\n    const newVal = textAreaRef.current.value //set newVal equal to the value of the text area\n    // backend api request\n    apiPostCreate(newVal, handleBackendUpdate) //newVal is the new post\n    //response and status are the callback\n    textAreaRef.current.value = '' // set text area to be blank after submit\n  }\n  return <div className={props.className}>\n          {canPost === true && <div className='col-12 mb-3'>\n            <form onSubmit={handleSubmit}>  \n              <textarea ref={textAreaRef} required={true} className='form-control' name='Post'>\n\n              </textarea>\n              <button type='submit' className='btn btn-primary my-3'>Post</button>\n          </form>\n          </div>\n        }\n      <PostsList newPosts = {newPosts} {...props} /> \n  </div>\n}\n\n\n\n\n  export function ParentPost(props){\n    const {post} = props\n    return post.parent ? <div className='row'>\n    <div className='col-11 mx-auto p-3 border rounded'>\n      <p className='mb-0 text-muted small'>Retweet</p>\n      <Post hideActions className={' '} Post={post.parent} />\n    </div>\n    </div> : null\n  }\n\n  export function Post(props) {\n      const {Post, didRetweet, hideActions} = props\n      const [actionPost, setActionPost] = useState(props.Post ? props.Post : null)\n      const className = props.className ? props.className : 'col-10 mx-auto col-md-6'\n      const handlePerformAction = (newActionPost, status) => {\n        if (status === 200){\n          setActionPost(newActionPost)\n        } else if (status === 201) {\n          if (didRetweet){\n            didRetweet(newActionPost)\n          }\n        }\n      }\n      return <div className={className}>\n              <div>\n                <p>{Post.id} - {Post.tweet}</p>\n                <ParentPost post={Post} />\n              </div>   \n          {(actionPost && hideActions !== true) && <div className='btn btn-group'>\n              <ActionBtn Post={actionPost} didPerformAction = {handlePerformAction} action={{type: \"like\", display:\"Likes\"}}/>\n              <ActionBtn Post={actionPost} didPerformAction = {handlePerformAction} action={{type: \"unlike\", display:\"Unlike\"}}/>\n              <ActionBtn Post={actionPost} didPerformAction = {handlePerformAction} action={{type: \"retweet\", display:\"Retweet\"}}/>\n            </div>\n         }\n        </div>      \n  }"]},"metadata":{},"sourceType":"module"}