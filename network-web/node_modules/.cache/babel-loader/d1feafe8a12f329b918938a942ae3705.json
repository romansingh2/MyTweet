{"ast":null,"code":"var _jsxFileName = \"/Users/romansingh/Documents/project4/network-web/src/posts/components.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { apiPostAction, apiPostCreate, apiPostList } from './lookup';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function PostsComponent(props) {\n  _s();\n\n  const textAreaRef = /*#__PURE__*/React.createRef(); //React refs make it possible for you to directly access the DOM in React.\n\n  const [newPosts, setNewPosts] = useState([]);\n\n  const handleBackendUpdate = (response, status) => {\n    // backend api response handler\n    let tempNewPosts = [...newPosts]; //create variable tempNewPosts and set it to newPosts array\n\n    console.log(response, status);\n\n    if (status === 201) {\n      tempNewPosts.unshift(response); //add new element to tempnewposts array, response should bring back actual post\n\n      setNewPosts(tempNewPosts); //change the state of setNewPosts to tempNewPosts\n    } else {\n      console.log(response);\n      alert(\"An error occured please try again\");\n    }\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault(); //if intended action does not occur prevent default action\n\n    const newVal = textAreaRef.current.value; //set newVal equal to the value of the text area\n    // backend api request\n\n    apiPostCreate(newVal, handleBackendUpdate); //newVal is the new post\n    //response and status are the callback\n\n    textAreaRef.current.value = ''; // set text area to be blank after submit\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: props.className,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"col-12 mb-3\",\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n          ref: textAreaRef,\n          required: true,\n          className: \"form-control\",\n          name: \"tweet\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"btn btn-primary my-3\",\n          children: \"Post\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(PostsList, {\n      newPosts: newPosts\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 10\n  }, this);\n}\n\n_s(PostsComponent, \"5dEAE/degksqC52lyKGNktfE0t8=\");\n\n_c = PostsComponent;\nexport function PostsList(props) {\n  _s2();\n\n  const [PostsInit, setPostsInit] = useState([]);\n  const [Posts, setPosts] = useState([]);\n  const [PostsDidSet, setPostsDidSet] = useState(false);\n  useEffect(() => {\n    const final = [...props.newPosts].concat(PostsInit); //join new posts and posts init\n\n    if (final.length !== Posts.length) {\n      setPosts(final);\n    }\n  }, [props.newPosts, Posts, PostsInit]);\n  useEffect(() => {\n    if (PostsDidSet === false) {\n      // if it is false\n      const handlePostListLookup = (response, status) => {\n        //set handlePostListLookup to response and status\n        if (status === 200) {\n          setPostsInit(response); //if status is 200 setPostsInit to response\n\n          setPostsDidSet(true); //change from false to true\n        } else {\n          alert(\"There was an error\");\n        }\n      };\n\n      apiPostList(handlePostListLookup); //update post list with resposne and status\n    }\n  }, [PostsInit, PostsDidSet, setPostsDidSet]);\n  return Posts.map((item, index) => {\n    return /*#__PURE__*/_jsxDEV(Post, {\n      Post: item,\n      className: \"my-5 py-5 border bg-white text-dark\"\n    }, `${index}-{item.id}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 12\n    }, this);\n  });\n}\n\n_s2(PostsList, \"qi/mnyAaODygMESwRyH25XkUquY=\");\n\n_c2 = PostsList;\nexport function ActionBtn(props) {\n  _s3();\n\n  const {\n    Post,\n    action\n  } = props;\n  const [likes, setLikes] = useState(Post.likes ? Post.likes : 0); // const [userLike, setUserLike] = useState(Post.userLike === true ? true : false)\n\n  const className = props.className ? props.className : 'btn btn-primary btn-sm';\n  const actionDisplay = action.display ? action.display : 'Action';\n\n  const handleActionBackendEvent = (response, status) => {\n    console.log(response, status);\n\n    if (status === 200) {\n      setLikes(response.likes); //setUserLike(true)\n    }\n  };\n\n  const handleClick = event => {\n    event.preventDefault();\n    apiPostAction(Post.id, action.type, handleActionBackendEvent);\n  };\n\n  const display = action.type === 'like' ? `${likes} ${actionDisplay}` : actionDisplay;\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: className,\n    onClick: handleClick,\n    children: display\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 12\n  }, this);\n}\n\n_s3(ActionBtn, \"cf0qk+jbCqd+H4f7OhAs9VYfmYM=\");\n\n_c3 = ActionBtn;\nexport function Post(props) {\n  const {\n    Post\n  } = props;\n  const className = props.className ? props.className : 'col-10 mx-auto col-md-6';\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: className,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: \" \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [Post.id, \" - \", Post.tweet]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 25\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"btn btn-group\",\n      children: [/*#__PURE__*/_jsxDEV(ActionBtn, {\n        Post: Post,\n        action: {\n          type: \"like\",\n          display: \"Likes\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ActionBtn, {\n        Post: Post,\n        action: {\n          type: \"unlike\",\n          display: \"Unlike\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ActionBtn, {\n        Post: Post,\n        action: {\n          type: \"retweet\",\n          display: \"\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 12\n  }, this);\n}\n_c4 = Post;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"PostsComponent\");\n$RefreshReg$(_c2, \"PostsList\");\n$RefreshReg$(_c3, \"ActionBtn\");\n$RefreshReg$(_c4, \"Post\");","map":{"version":3,"sources":["/Users/romansingh/Documents/project4/network-web/src/posts/components.js"],"names":["React","useEffect","useState","apiPostAction","apiPostCreate","apiPostList","PostsComponent","props","textAreaRef","createRef","newPosts","setNewPosts","handleBackendUpdate","response","status","tempNewPosts","console","log","unshift","alert","handleSubmit","event","preventDefault","newVal","current","value","className","PostsList","PostsInit","setPostsInit","Posts","setPosts","PostsDidSet","setPostsDidSet","final","concat","length","handlePostListLookup","map","item","index","ActionBtn","Post","action","likes","setLikes","actionDisplay","display","handleActionBackendEvent","handleClick","id","type","tweet"],"mappings":"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","sourcesContent":["import React, {useEffect, useState}  from 'react'\n\nimport {apiPostAction, apiPostCreate, apiPostList} from './lookup'\n\nexport function PostsComponent(props) {\n  const textAreaRef = React.createRef() //React refs make it possible for you to directly access the DOM in React.\n  const [newPosts, setNewPosts] = useState([]) \n  \n  const handleBackendUpdate = (response, status) => {\n    // backend api response handler\n    let tempNewPosts = [...newPosts] //create variable tempNewPosts and set it to newPosts array\n    console.log(response, status)  \n    if (status === 201){\n      tempNewPosts.unshift(response) //add new element to tempnewposts array, response should bring back actual post\n      setNewPosts(tempNewPosts) //change the state of setNewPosts to tempNewPosts\n\n    } else {\n      console.log(response)\n      alert(\"An error occured please try again\")\n    }\n  }\n  \n  const handleSubmit = (event) => { \n    event.preventDefault() //if intended action does not occur prevent default action\n    const newVal = textAreaRef.current.value //set newVal equal to the value of the text area\n    // backend api request\n    apiPostCreate(newVal, handleBackendUpdate) //newVal is the new post\n    //response and status are the callback\n    textAreaRef.current.value = '' // set text area to be blank after submit\n  }\n  return <div className={props.className}>\n          <div className='col-12 mb-3'>\n            <form onSubmit={handleSubmit}>   \n              <textarea ref={textAreaRef} required={true} className='form-control' name='tweet'>\n\n              </textarea>\n              <button type='submit' className='btn btn-primary my-3'>Post</button>\n          </form>\n          </div>\n      <PostsList newPosts = {newPosts}/>\n  </div>\n}\n\n\nexport function PostsList(props) {\n  const [PostsInit, setPostsInit] = useState([])\n  const [Posts, setPosts] = useState([])\n  const [PostsDidSet, setPostsDidSet] = useState(false)\n  useEffect(()=>{\n    const final = [...props.newPosts].concat(PostsInit) //join new posts and posts init\n    if (final.length !== Posts.length) {\n      setPosts(final) \n    }\n  }, [props.newPosts, Posts, PostsInit])\n\n  useEffect(() => {           \n    if (PostsDidSet === false){       // if it is false\n      const handlePostListLookup  = (response, status) => { //set handlePostListLookup to response and status\n        if (status === 200){ \n          setPostsInit(response) //if status is 200 setPostsInit to response\n          setPostsDidSet(true) //change from false to true\n        } else {\n          alert(\"There was an error\")\n        }\n      }\n      apiPostList(handlePostListLookup) //update post list with resposne and status\n    }\n  }, [PostsInit, PostsDidSet, setPostsDidSet]) \n  return Posts.map((item, index)=>{\n    return <Post Post={item} className='my-5 py-5 border bg-white text-dark' key={`${index}-{item.id}`} />\n  })\n}\n\n\n  export function ActionBtn(props) {\n    const {Post, action} = props\n    const [likes, setLikes] = useState(Post.likes ? Post.likes : 0)\n   // const [userLike, setUserLike] = useState(Post.userLike === true ? true : false)\n    const className = props.className ? props.className : 'btn btn-primary btn-sm'\n    const actionDisplay = action.display ? action.display : 'Action'\n    \n    const handleActionBackendEvent = (response, status) =>{\n      console.log(response, status)\n      if (status === 200){\n        setLikes(response.likes)\n        //setUserLike(true)\n      }\n    }\n    const handleClick = (event) => {\n      event.preventDefault()\n      apiPostAction(Post.id, action.type, handleActionBackendEvent)\n\n      \n    }\n    const display = action.type === 'like' ? `${likes} ${actionDisplay}` : actionDisplay\n    return <button className={className} onClick={handleClick}>{display}</button>\n  }\n  \n  \n  export function Post(props) {\n    const {Post} = props\n    const className = props.className ? props.className : 'col-10 mx-auto col-md-6'\n    return <div className={className}>\n            <div> </div><p>{Post.id} - {Post.tweet}</p>\n        <div className='btn btn-group'>\n          <ActionBtn Post={Post} action={{type: \"like\", display:\"Likes\"}}/>\n          <ActionBtn Post={Post} action={{type: \"unlike\", display:\"Unlike\"}}/>\n          <ActionBtn Post={Post} action={{type: \"retweet\", display:\"\"}}/>\n        </div>\n    </div>\n  }"]},"metadata":{},"sourceType":"module"}