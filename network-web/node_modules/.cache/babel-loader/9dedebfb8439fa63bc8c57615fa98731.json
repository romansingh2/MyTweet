{"ast":null,"code":"var _jsxFileName = \"/Users/romansingh/Documents/project4/network-web/src/posts/components.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { loadPosts } from '../lookup';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function PostsComponent(props) {\n  _s();\n\n  const textAreaRef = /*#__PURE__*/React.createRef(); //React refs make it possible for you to directly access the DOM in React.\n\n  const [newPosts, setNewPosts] = useState([]);\n\n  const handleSubmit = event => {\n    event.preventDefault(); //if intended action does not occur prevent default action\n\n    const newVal = textAreaRef.current.value; //set newVal equal to the value of the text area\n\n    let tempNewPosts = [...newPosts]; //create variable tempNewPosts and set it to newPosts array\n\n    tempNewPosts.unshift({\n      //add new element to tempnewposts array\n      tweet: newVal,\n      likes: 0,\n      id: 12313\n    });\n    setNewPosts(tempNewPosts); //change the state of setNewPosts to tempNewPosts\n\n    textAreaRef.current.value = ''; // set text area to be blank after submit\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: props.className,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"col-12 mb-3\",\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n          ref: textAreaRef,\n          required: true,\n          className: \"form-control\",\n          name: \"tweet\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"btn btn-primary my-3\",\n          children: \"Post\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(PostsList, {\n      newPosts: newPosts\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 10\n  }, this);\n}\n\n_s(PostsComponent, \"5dEAE/degksqC52lyKGNktfE0t8=\");\n\n_c = PostsComponent;\nexport function PostsList(props) {\n  _s2();\n\n  const [tweetsInit, setTweetsInit] = useState([]);\n  const [tweets, setTweets] = useState([]);\n  const [tweetsDidSet, setTweetsDidSet] = useState(false);\n  useEffect(() => {\n    const final = [...props.newTweets].concat(tweetsInit);\n\n    if (final.length !== tweets.length) {\n      setTweets(final);\n    }\n  }, [props.newTweets, tweets, tweetsInit]);\n  useEffect(() => {\n    if (tweetsDidSet === false) {\n      const myCallback = (response, status) => {\n        if (status === 200) {\n          setTweetsInit(response);\n          setTweetsDidSet(true);\n        } else {\n          alert(\"There was an error\");\n        }\n      };\n\n      loadTweets(myCallback);\n    }\n  }, [tweetsInit, tweetsDidSet, setTweetsDidSet]);\n  return tweets.map((item, index) => {\n    return /*#__PURE__*/_jsxDEV(Tweet, {\n      tweet: item,\n      className: \"my-5 py-5 border bg-white text-dark\"\n    }, `${index}-{item.id}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 12\n    }, this);\n  });\n}\n\n_s2(PostsList, \"P6qXvmm+5AyDsJ0n/lMk6wZyO4Q=\");\n\n_c2 = PostsList;\nexport function ActionBtn(props) {\n  _s3();\n\n  const {\n    Post,\n    action\n  } = props;\n  const [likes, setLikes] = useState(Post.likes ? Post.likes : 0);\n  const [userLike, setUserLike] = useState(Post.userLike === true ? true : false);\n  const className = props.className ? props.className : 'btn btn-primary btn-sm';\n  const actionDisplay = action.display ? action.display : 'Action';\n\n  const handleClick = event => {\n    event.preventDefault();\n\n    if (action.type === 'like') {\n      if (userLike === true) {\n        // perhaps i Unlike it?\n        setLikes(likes - 1);\n        setUserLike(false);\n      } else {\n        setLikes(likes + 1);\n        setUserLike(true);\n      }\n    }\n  };\n\n  const display = action.type === 'like' ? `${likes} ${actionDisplay}` : actionDisplay;\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: className,\n    onClick: handleClick,\n    children: display\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 12\n  }, this);\n}\n\n_s3(ActionBtn, \"Om5k1x6RCGH4/VK+5x8JV9YOenM=\");\n\n_c3 = ActionBtn;\nexport function Post(props) {\n  const {\n    Post\n  } = props;\n  const className = props.className ? props.className : 'col-10 mx-auto col-md-6';\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: className,\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: [Post.id, \" - \", Post.tweet]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"btn btn-group\",\n      children: [/*#__PURE__*/_jsxDEV(ActionBtn, {\n        Post: Post,\n        action: {\n          type: \"like\",\n          display: \"Likes\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ActionBtn, {\n        Post: Post,\n        action: {\n          type: \"unlike\",\n          display: \"Unlike\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ActionBtn, {\n        Post: Post,\n        action: {\n          type: \"retweet\",\n          display: \"\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 12\n  }, this);\n}\n_c4 = Post;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"PostsComponent\");\n$RefreshReg$(_c2, \"PostsList\");\n$RefreshReg$(_c3, \"ActionBtn\");\n$RefreshReg$(_c4, \"Post\");","map":{"version":3,"sources":["/Users/romansingh/Documents/project4/network-web/src/posts/components.js"],"names":["React","useEffect","useState","loadPosts","PostsComponent","props","textAreaRef","createRef","newPosts","setNewPosts","handleSubmit","event","preventDefault","newVal","current","value","tempNewPosts","unshift","tweet","likes","id","className","PostsList","tweetsInit","setTweetsInit","tweets","setTweets","tweetsDidSet","setTweetsDidSet","final","newTweets","concat","length","myCallback","response","status","alert","loadTweets","map","item","index","ActionBtn","Post","action","setLikes","userLike","setUserLike","actionDisplay","display","handleClick","type"],"mappings":"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","sourcesContent":["import React, {useEffect, useState}  from 'react'\n\nimport {loadPosts} from '../lookup'\n\nexport function PostsComponent(props) {\n  const textAreaRef = React.createRef() //React refs make it possible for you to directly access the DOM in React.\n  const [newPosts, setNewPosts] = useState([]) \n  const handleSubmit = (event) => { \n    event.preventDefault() //if intended action does not occur prevent default action\n    const newVal = textAreaRef.current.value //set newVal equal to the value of the text area\n    let tempNewPosts = [...newPosts] //create variable tempNewPosts and set it to newPosts array\n    tempNewPosts.unshift({ //add new element to tempnewposts array\n      tweet: newVal,\n      likes: 0,\n      id: 12313\n    })\n    setNewPosts(tempNewPosts) //change the state of setNewPosts to tempNewPosts\n    textAreaRef.current.value = '' // set text area to be blank after submit\n  }\n  return <div className={props.className}>\n          <div className='col-12 mb-3'>\n            <form onSubmit={handleSubmit}>\n              <textarea ref={textAreaRef} required={true} className='form-control' name='tweet'>\n\n              </textarea>\n              <button type='submit' className='btn btn-primary my-3'>Post</button>\n          </form>\n          </div>\n      <PostsList newPosts = {newPosts}/>\n  </div>\n}\n\n\nexport function PostsList(props) {\n  const [tweetsInit, setTweetsInit] = useState([])\n  const [tweets, setTweets] = useState([])\n  const [tweetsDidSet, setTweetsDidSet] = useState(false)\n  useEffect(()=>{\n    const final = [...props.newTweets].concat(tweetsInit)\n    if (final.length !== tweets.length) {\n      setTweets(final)\n    }\n  }, [props.newTweets, tweets, tweetsInit])\n\n  useEffect(() => {\n    if (tweetsDidSet === false){\n      const myCallback = (response, status) => {\n        if (status === 200){\n          setTweetsInit(response)\n          setTweetsDidSet(true)\n        } else {\n          alert(\"There was an error\")\n        }\n      }\n      loadTweets(myCallback)\n    }\n  }, [tweetsInit, tweetsDidSet, setTweetsDidSet])\n  return tweets.map((item, index)=>{\n    return <Tweet tweet={item} className='my-5 py-5 border bg-white text-dark' key={`${index}-{item.id}`} />\n  })\n}\n\n\n  export function ActionBtn(props) {\n    const {Post, action} = props\n    const [likes, setLikes] = useState(Post.likes ? Post.likes : 0)\n    const [userLike, setUserLike] = useState(Post.userLike === true ? true : false)\n    const className = props.className ? props.className : 'btn btn-primary btn-sm'\n    const actionDisplay = action.display ? action.display : 'Action'\n    \n    const handleClick = (event) => {\n      event.preventDefault()\n      if (action.type === 'like') {\n        if (userLike === true) {\n          // perhaps i Unlike it?\n          setLikes(likes - 1)\n          setUserLike(false)\n        } else {\n          setLikes(likes + 1)\n          setUserLike(true)\n        }\n        \n      }\n    }\n    const display = action.type === 'like' ? `${likes} ${actionDisplay}` : actionDisplay\n    return <button className={className} onClick={handleClick}>{display}</button>\n  }\n  \n  \n  export function Post(props) {\n    const {Post} = props\n    const className = props.className ? props.className : 'col-10 mx-auto col-md-6'\n    return <div className={className}>\n        <p>{Post.id} - {Post.tweet}</p>\n        <div className='btn btn-group'>\n          <ActionBtn Post={Post} action={{type: \"like\", display:\"Likes\"}}/>\n          <ActionBtn Post={Post} action={{type: \"unlike\", display:\"Unlike\"}}/>\n          <ActionBtn Post={Post} action={{type: \"retweet\", display:\"\"}}/>\n        </div>\n    </div>\n  }"]},"metadata":{},"sourceType":"module"}