{"ast":null,"code":"function lookup(method, endpoint, callback, data) {\n  let jsonData;\n\n  if (data) {\n    //if data exists\n    jsonData = JSON.stringify(data);\n  }\n\n  const xhr = new XMLHttpRequest(); //used to intereact with servers, retrieve data from a URL without doing a full page refresh\n\n  const url = `http://localhost:8000/api${endpoint}`;\n  xhr.responseType = \"json\";\n  xhr.open(method, url); //Initializes a request.\n\n  xhr.onload = function () {\n    //Fired when an XMLHttpRequest transaction completes successfully.\n    callback(xhr.response, xhr.status);\n  };\n\n  xhr.onerror = function (e) {\n    //e is the short var reference for event object which will be passed to event handlers.\n    console.log(e);\n    callback({\n      \"message\": \"The request was an error\"\n    }, 400);\n  };\n}\n\nexport function loadPosts(callback) {\n  const xhr = new XMLHttpRequest();\n  const method = 'GET'; // \"POST\"\n\n  const url = \"http://localhost:8000/api/posts/\";\n  const responseType = \"json\";\n  xhr.responseType = responseType;\n  xhr.open(method, url);\n\n  xhr.onload = function () {\n    callback(xhr.response, xhr.status);\n  };\n\n  xhr.onerror = function (e) {\n    console.log(e);\n    callback({\n      \"message\": \"The request was an error\"\n    }, 400);\n  };\n\n  xhr.send();\n}","map":{"version":3,"sources":["/Users/romansingh/Documents/project4/network-web/src/lookup/components.js"],"names":["lookup","method","endpoint","callback","data","jsonData","JSON","stringify","xhr","XMLHttpRequest","url","responseType","open","onload","response","status","onerror","e","console","log","loadPosts","send"],"mappings":"AAAA,SAASA,MAAT,CAAgBC,MAAhB,EAAwBC,QAAxB,EAAkCC,QAAlC,EAA4CC,IAA5C,EAAkD;AAChD,MAAIC,QAAJ;;AACA,MAAID,IAAJ,EAAS;AAAE;AACTC,IAAAA,QAAQ,GAAGC,IAAI,CAACC,SAAL,CAAeH,IAAf,CAAX;AACD;;AACD,QAAMI,GAAG,GAAG,IAAIC,cAAJ,EAAZ,CALgD,CAKf;;AACjC,QAAMC,GAAG,GAAI,4BAA2BR,QAAS,EAAjD;AACAM,EAAAA,GAAG,CAACG,YAAJ,GAAmB,MAAnB;AACAH,EAAAA,GAAG,CAACI,IAAJ,CAASX,MAAT,EAAiBS,GAAjB,EARgD,CAQ1B;;AACtBF,EAAAA,GAAG,CAACK,MAAJ,GAAa,YAAW;AAAE;AACxBV,IAAAA,QAAQ,CAACK,GAAG,CAACM,QAAL,EAAeN,GAAG,CAACO,MAAnB,CAAR;AACD,GAFD;;AAGAP,EAAAA,GAAG,CAACQ,OAAJ,GAAc,UAAUC,CAAV,EAAa;AAAE;AAC3BC,IAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACAd,IAAAA,QAAQ,CAAC;AAAC,iBAAW;AAAZ,KAAD,EAA0C,GAA1C,CAAR;AACD,GAHD;AAMD;;AAID,OAAO,SAASiB,SAAT,CAAmBjB,QAAnB,EAA6B;AAChC,QAAMK,GAAG,GAAG,IAAIC,cAAJ,EAAZ;AACA,QAAMR,MAAM,GAAG,KAAf,CAFgC,CAEX;;AACrB,QAAMS,GAAG,GAAG,kCAAZ;AACA,QAAMC,YAAY,GAAG,MAArB;AACAH,EAAAA,GAAG,CAACG,YAAJ,GAAmBA,YAAnB;AACAH,EAAAA,GAAG,CAACI,IAAJ,CAASX,MAAT,EAAiBS,GAAjB;;AACAF,EAAAA,GAAG,CAACK,MAAJ,GAAa,YAAW;AACtBV,IAAAA,QAAQ,CAACK,GAAG,CAACM,QAAL,EAAeN,GAAG,CAACO,MAAnB,CAAR;AACD,GAFD;;AAGAP,EAAAA,GAAG,CAACQ,OAAJ,GAAc,UAAUC,CAAV,EAAa;AACzBC,IAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACAd,IAAAA,QAAQ,CAAC;AAAC,iBAAW;AAAZ,KAAD,EAA0C,GAA1C,CAAR;AACD,GAHD;;AAIAK,EAAAA,GAAG,CAACa,IAAJ;AACD","sourcesContent":["function lookup(method, endpoint, callback, data) {\n  let jsonData; \n  if (data){ //if data exists\n    jsonData = JSON.stringify(data)\n  }\n  const xhr = new XMLHttpRequest() //used to intereact with servers, retrieve data from a URL without doing a full page refresh\n  const url = `http://localhost:8000/api${endpoint}`\n  xhr.responseType = \"json\"\n  xhr.open(method, url) //Initializes a request.\n  xhr.onload = function() { //Fired when an XMLHttpRequest transaction completes successfully.\n    callback(xhr.response, xhr.status)\n  }\n  xhr.onerror = function (e) { //e is the short var reference for event object which will be passed to event handlers.\n    console.log(e)\n    callback({\"message\": \"The request was an error\"}, 400)\n  }\n\n\n}\n\n\n\nexport function loadPosts(callback) {\n    const xhr = new XMLHttpRequest()\n    const method = 'GET' // \"POST\"\n    const url = \"http://localhost:8000/api/posts/\"\n    const responseType = \"json\"\n    xhr.responseType = responseType\n    xhr.open(method, url)\n    xhr.onload = function() {\n      callback(xhr.response, xhr.status)\n    }\n    xhr.onerror = function (e) {\n      console.log(e)\n      callback({\"message\": \"The request was an error\"}, 400)\n    }\n    xhr.send()\n  }"]},"metadata":{},"sourceType":"module"}